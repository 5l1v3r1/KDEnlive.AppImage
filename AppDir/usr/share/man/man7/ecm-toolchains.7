.\" Man page generated from reStructuredText.
.
.TH "ECM-TOOLCHAINS" "7" "December 01, 2016" "5.27" "Extra CMake Modules"
.SH NAME
ecm-toolchains \- ECM Toolchains Reference
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH INTRODUCTION
.sp
Extra CMake Modules (ECM) provides some toolchain modules. Unlike normal
modules, these are not included directly in projects, but specified with
the \fBCMAKE_TOOLCHAIN_FILE\fP cache variable on the commandline.
.SH ALL MODULES
.SS AndroidToolchain
.sp
Enable easy compilation of cmake projects on Android.
.sp
By using this android toolchain, the projects will be set up to compile the
specified project targeting an Android platform, depending on its input.
Furthermore, if desired, an APK can be directly generated by using the
\fI\%androiddeployqt\fP tool.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This module requires CMake 3.1.
.UNINDENT
.UNINDENT
.sp
Since 1.7.0.
.SS Usage
.sp
To use this file, you need to set the \fBCMAKE_TOOLCHAIN_FILE\fP to point to
\fBAndroidToolchain.cmake\fP on the command line:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cmake \-DCMAKE_TOOLCHAIN_FILE=/usr/share/ECM/toolchain/AndroidToolchain.cmake
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You will also need to provide the locations of the Android NDK and SDK. This
can be done on the commandline or with environment variables; in either case
the variable names are:
.INDENT 0.0
.TP
.B \fBANDROID_NDK\fP
The NSK root path.
.TP
.B \fBANDROID_SDK_ROOT\fP
The SDK root path.
.UNINDENT
.sp
Additional options are specified as cache variables (eg: on the command line):
.INDENT 0.0
.TP
.B \fBANDROID_ARCHITECTURE\fP
The architecture to compile for. Default: \fBarm\fP\&.
.TP
.B \fBANDROID_TOOLCHAIN\fP
The toolchain to use. See the \fBtoolchains\fP directory of the NDK.
Default: \fBarm\-linux\-androideabi\fP\&.
.TP
.B \fBANDROID_ABI\fP
The ABI to use. See the \fBsources/cxx\-stl/gnu\-libstdc++/*/libs\fP
directories in the NDK. Default: \fBarmeabi\-v7a\fP\&.
.TP
.B \fBANDROID_GCC_VERSION\fP
The GCC version to use. Default: \fB4.9\fP\&.
.TP
.B \fBANDROID_API_LEVEL\fP
The \fI\%API level\fP
to require. Default: \fB14\fP\&.
.TP
.B \fBANDROID_SDK_BUILD_TOOLS_REVISION\fP
The build tools version to use. Default: \fB21.1.1\fP\&.
.UNINDENT
.SS Deploying Qt Applications
.sp
After building the application, you will need to generate an APK that can be
deployed to an Android device. This module integrates androiddeployqt support
to help with this for Qt\-based projects. To enable this, set the
\fBQTANDROID_EXPORTED_TARGET\fP variable to the target you wish to export as an
APK, as well as \fBANDROID_APK_DIR\fP to a directory containing some basic
information. This will create a \fBcreate\-apk\-<target>\fP target that will
generate the APK file.  See the \fI\%Qt on Android deployment documentation\fP for more information.
.sp
For example, you could do:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
cmake \e
  \-DCMAKE_TOOLCHAIN_FILE=/usr/share/ECM/toolchain/AndroidToolchain.cmake \e
  \-DQTANDROID_EXPORTED_TARGET=myapp \e
  \-DANDROID_APK_DIR=myapp\-apk
make
make create\-apk\-myapp
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The APK would then be found in \fBmyapp_build_apk/bin\fP in the build directory.
.sp
The create\-apk\-myapp target will be able to take an ARGS parameter with further
arguments for androiddeployqt. For example, one can use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make create\-apk\-myapp ARGS="\-\-install"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To install the apk to test. To generate a signed apk, one can do it with the
following syntax:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make create\-apk\-myapp ARGS="\-\-sign ~/my.keystore alias_name"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
See Android documentation on how to create a keystore to use
.SH COPYRIGHT
KDE Developers
.\" Generated by docutils manpage writer.
.
